#!/usr/bin/python
""" 
    Copyright 2008 CTBTO Organisation
    
    module: generate_noble_gaz_arr
"""

LIBXML2_DIR='/usr/lib'
LIBXSLT_DIR='/usr/lib'

# On my machine
# On dls007 => '/opt/oracle'
ORACLE_HOME='/usr/lib/oracle/xe/app/oracle/product/10.2.0/server'


###############################################################################
###############################################################################
""" You probably do not want to change any thing below that part """
###############################################################################
###############################################################################


import os
import sys

class ENVError(Exception):
    """Base class for All exceptions"""

    def __init__(self,aMsg):
        super(ENVError,self).__init__()
        self.message = aMsg
 
# Constants
LIBXML2_ROOT     ='libxml2.' 
LIBXSLT_ROOT     ='libxslt.'
LIBEXSLT_ROOT    ='libexslt.'
LD_LIBRARY_PATH  ='LD_LIBRARY_PATH'
  
def check_and_set_env():
    """ check that the right env variables are set """
    
    #CHECK that LIBXML2_DIR contains a libxml2.so*
    if LIBXML2_DIR == None or not os.path.isdir(LIBXML2_DIR):
        raise ENVError("LIBXML2_DIR %s is not a directory"%(LIBXML2_DIR))
    
    content = os.listdir(LIBXML2_DIR)
    
    found   = False
    
    for l in content:
        if l.startswith(LIBXML2_ROOT):
            found = True
            break
    
    if not found:
        raise ENVError("Cannot find %s.so.* in LIBXML2_DIR %s"%(LIBXML2_ROOT,LIBXML2_DIR))
    
    # CHECK that LIBXSLT_DIR contains a libxslt.so.*
    if LIBXSLT_DIR == None or not os.path.isdir(LIBXSLT_DIR):
        raise ENVError("LIBXSLT_DIR %s is not a directory"%(LIBXSLT_DIR))
    
    content = os.listdir(LIBXSLT_DIR)
    
    found   = False
    
    #Look for lib xslt
    for l in content:
        if l.startswith(LIBXSLT_ROOT):
            found = True
            break
    
    if not found:
        raise ENVError("Cannot find %sso.* in LIBXML2_DIR %s"%(LIBXSLT_ROOT,LIBXSLT_DIR))
    
    found   = False
    
    #Look for lib xslt
    for l in content:
        if l.startswith(LIBEXSLT_ROOT):
            found = True
            break
    
    if not found:
        raise ENVError("Cannot find %sso.* in LIBXML2_DIR %s"%(LIBEXSLT_ROOT,LIBXSLT_DIR))
    
    # add the two dirs in the LD_LIBRARY_PATH
    os.environ[LD_LIBRARY_PATH] = "%s:%s:%s"%(LIBXML2_DIR,LIBXSLT_DIR,os.environ[LD_LIBRARY_PATH])
    
    print "LD_LIBRARY_PATH = %s"%(os.environ[LD_LIBRARY_PATH])
    
def check_and_set_oracle_env():
    
    if ORACLE_HOME == None or not os.path.isdir(ORACLE_HOME):
        raise ENVError("ORACLE_HOME %s is not a directory"%(ORACLE_HOME))
    
    # check if there is dir ORACLE_HOME/lib with libclntsh. in it
    if not os.path.exists('%s/lib'%(ORACLE_HOME)) and not os.path.isdir('%s/lib'%(ORACLE_HOME)):
        raise ENVError("There is no directory %s/lib"%(ORACLE_HOME))
        
    content = os.listdir('%s/lib'%(ORACLE_HOME))
    
    found   = False
    
    for l in content:
        if l.startswith('libclntsh.'):
            found = True
            break
    
    if not found:
        raise ENVError("Cannot find libclntsh.so.* in %s. Please check that %s is an Oracle installation dir"%(ORACLE_HOME))
    
    # set Oracle_home
    os.environ['ORACLE_HOME'] = ORACLE_HOME
    
if __name__ == "__main__":

    try:
        check_and_set_env()
    
        check_and_set_oracle_env()
    
        import ctbto.run.generate_arr as runner
   
        runner.run()
        
        
    except ENVError,e:
        print(e.message)
        sys.exit(4)